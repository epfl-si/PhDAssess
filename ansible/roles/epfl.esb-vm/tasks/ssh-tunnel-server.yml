# Tasks to set up the Zeebe cluster member on the VM
- include_vars: ssh-tunnel-server-vars.yml
  tags: always


- name: "Pull {{ ssh_tunnel_server_image }}"
  community.docker.docker_image:
    name: "{{ ssh_tunnel_server_image }}:{{ ssh_tunnel_server_image_tag }}"
    source: pull

- name: "Initialize OpenSSH server keys in {{ ssh_tunnel_server_keys_dir }}"
  shell:
    cmd: |
      if [ -d "{{ ssh_tunnel_server_keys_dir }}" ]; then
        echo NOCHANGE
        exit 0
      fi

      docker run -v "{{ ssh_tunnel_server_keys_dir }}:/keys" \
         "{{ ssh_tunnel_server_image }}:{{ ssh_tunnel_server_image_tag }}" \
         bash -c "cp -a /etc/ssh/* /keys"
  register: _ssh_tunnel_server_key_init
  changed_when: >-
    "NOCHANGE" not in _ssh_tunnel_server_key_init.stdout

- name: "{{ esb_ssh_tunnel.client_keys_dir }}"
  ansible.builtin.file:
    path: "{{ esb_ssh_tunnel.client_keys_dir }}"
    state: directory
    recurse: yes

- name: "Initialize OpenSSH client keys in {{ esb_ssh_tunnel.client_keys_dir }}"
  shell:
    cmd: |
      set -e -x
      cd "{{ esb_ssh_tunnel.client_keys_dir }}"
      if [ -f "id_rsa" ]; then
        echo "NOCHANGE"
        exit 0
      fi
      ssh-keygen -f id_rsa </dev/null
  register: _ssh_tunnel_client_key_init
  changed_when: >-
    "NOCHANGE" not in _ssh_tunnel_client_key_init.stdout

- name: "Read public key out of {{ esb_ssh_tunnel.client_keys_dir }}/id_rsa.pub"
  shell: 'cat "{{ esb_ssh_tunnel.client_keys_dir }}/id_rsa.pub"'
  register: _esb_tunnel_ssh_client_public_key
  changed_when: false

- name: "Run the OpenSSH server in Docker network {{ esb_docker_network }}"
  when: _esb_tunnel_ssh_client_public_key is not skipped
  community.docker.docker_container:
    name: "{{ ssh_tunnel_server_container_name }}"
    image: "{{ ssh_tunnel_server_image }}:{{ ssh_tunnel_server_image_tag }}"
    published_ports:
      - "{{ esb_ssh_tunnel.port }}:2222"
    networks:
      - name: "{{ esb_docker_network }}"
    env:
      PUBLIC_KEY: "{{ _esb_tunnel_ssh_client_public_key.stdout }}"
      USER_NAME: "{{ esb_ssh_tunnel.username }}"
    volumes:
      - "{{ ssh_tunnel_server_keys_dir }}:/config/ssh_host_keys"

- name: "{{ esb_ssh_tunnel.client_keys_dir }}/known_hosts"
  shell:
    executable: /bin/bash
    cmd: |
      set -e -x
      set -o pipefail
      cd "{{ esb_ssh_tunnel.client_keys_dir }}"
      for retry in $(seq 1 5); do
        if ssh-keyscan -p {{ esb_ssh_tunnel.port }} {{ esb_ssh_tunnel.host }} \
          > known_hosts.NEW
        then
          break
        else
          sleep 6
        fi
      done

      # Sigh.
      perl -pe 's/{{ esb_ssh_tunnel.host | hostname_short
                     }}(?![.])/{{ esb_ssh_tunnel.host }}/' known_hosts.NEW | \
         sort > known_hosts.SORTED
      rm known_hosts.NEW

      if [ -f known_hosts ] && cmp known_hosts.SORTED known_hosts >/dev/null 2>&1; then
        echo "NOCHANGE"
        exit 0
      else
        (echo "Before:"; echo; cat known_hosts) >&2
        (echo "After:"; echo; cat known_hosts.SORTED) >&2
        mv known_hosts.SORTED known_hosts
      fi
  register: _ssh_tunnel_known_hosts
  changed_when: >-
    "NOCHANGE" not in _ssh_tunnel_known_hosts.stdout
