# Tasks to set up the Zeebe cluster member on the VM
- tags: always
  include_vars: "{{ item }}"
  with_items:
    - ssh-tunnel-server-vars.yml
    - versions.yml

- name: "Pull {{ ssh_tunnel_server_base_image.qualified }}"
  community.docker.docker_image:
    name: "{{ ssh_tunnel_server_base_image.qualified }}"
    source: pull

- name: "{{ ssh_tunnel_server_image_build_dir }}"
  ansible.builtin.file:
    path: "{{ ssh_tunnel_server_image_build_dir }}"
    state: directory

- name: "{{ ssh_tunnel_server_image_build_dir }}/Dockerfile"
  ansible.builtin.copy:
    dest: "{{ ssh_tunnel_server_image_build_dir }}/Dockerfile"
    content: |
      FROM {{ ssh_tunnel_server_base_image.qualified }}
      RUN rm -rf /etc/services.d/openssh-server/log/

- name: "Build {{ ssh_tunnel_server_image }}"
  community.docker.docker_image:
    name: "{{ ssh_tunnel_server_image }}"
    source: build  
    build:
      path: "{{ ssh_tunnel_server_image_build_dir }}"

- name: "Initialize OpenSSH server keys in {{ ssh_tunnel_server_keys_dir }}"
  shell:
    cmd: |
      if [ -d "{{ ssh_tunnel_server_keys_dir }}" ]; then
        echo NOCHANGE
        exit 0
      fi

      docker run -v "{{ ssh_tunnel_server_keys_dir }}:/keys" \
         "{{ ssh_tunnel_server_base_image.qualified }}" \
         bash -c "cp -a /etc/ssh/* /keys"
  register: _ssh_tunnel_server_key_init
  changed_when: >-
    "NOCHANGE" not in _ssh_tunnel_server_key_init.stdout

- vars:
    _sshd_config: "{{ ssh_tunnel_server_keys_dir }}/sshd_config"
  name: "{{ _sshd_config }}"
  copy:
    dest: "{{ _sshd_config }}"
    content: >-
      {{ lookup("template", "tunnel_sshd_config") }}
  register: _sshd_config

- name: "{{ esb_ssh_tunnels.client_keys_dir }}"
  ansible.builtin.file:
    path: "{{ esb_ssh_tunnels.client_keys_dir }}"
    state: directory
    recurse: yes

- name: "Initialize OpenSSH client keys in {{ esb_ssh_tunnels.client_keys_dir }}"
  shell:
    cmd: |
      set -e -x
      cd "{{ esb_ssh_tunnels.client_keys_dir }}"
      if [ -f "id_rsa" ]; then
        echo "NOCHANGE"
        exit 0
      fi
      ssh-keygen -f id_rsa </dev/null
  register: _ssh_tunnel_client_key_init
  changed_when: >-
    "NOCHANGE" not in _ssh_tunnel_client_key_init.stdout

- name: "Read public key out of {{ esb_ssh_tunnels.client_keys_dir }}/id_rsa.pub"
  shell: 'cat "{{ esb_ssh_tunnels.client_keys_dir }}/id_rsa.pub"'
  register: _esb_tunnel_ssh_client_public_key
  changed_when: false

# Zeebe's “gossip” feature kind of insists that quorum members be seen
# from the same hostname and port from everywhere in the cluster. In
# order to achieve this, we need two separate ssh tunnel endpoints.
- name: "OpenSSH servers in Docker network {{ esb_docker_network }}"
  when: _esb_tunnel_ssh_client_public_key is not skipped
  community.docker.docker_container:
    restart: "{{ _sshd_config is not skipped and _sshd_config is changed }}"
    name: "ssh-tunnel-server-{{ item.quorum_id }}"
    hostname: "{{ item.name }}"
    image: "{{ ssh_tunnel_server_image }}"
    published_ports:
      - "{{ item.via }}:2222"
    networks:
      - name: "{{ esb_docker_network }}"
    env:
      PUBLIC_KEY: >-
        no-pty,command="/bin/sleep infinity"
        {{ _esb_tunnel_ssh_client_public_key.stdout }}
      USER_NAME: "{{ esb_ssh_tunnels.username }}"
    volumes:
      - "{{ ssh_tunnel_server_keys_dir }}:/config/ssh_host_keys:ro"
  with_items: "{{ esb_ssh_tunnels.reverse.zeebe }}"

- name: "{{ esb_ssh_tunnels.client_keys_dir }}/known_hosts"
  shell:
    executable: /bin/bash
    cmd: |
      set -e -x
      set -o pipefail
      cd "{{ esb_ssh_tunnels.client_keys_dir }}"
      for port in {{ esb_ssh_tunnels.reverse.zeebe | map(attribute="via") | join(" ") }}; do
        for retry in $(seq 1 5); do
          if ssh-keyscan -p $port  {{ esb_ssh_tunnels.host }} > known_hosts.$port.NEW; then
            break
          else
            sleep 6
          fi
        done
      done

      # Sigh.
      cat known_hosts.*.NEW | \
          perl -pe 's/{{ esb_ssh_tunnels.host | hostname_short
                      }}(?![.])/{{ esb_ssh_tunnels.host }}/' | \
         sort > known_hosts.NEW
      rm known_hosts.*.NEW

      if [ -f known_hosts ] && cmp known_hosts.NEW known_hosts >/dev/null 2>&1; then
        echo "NOCHANGE"
        exit 0
      else
        (echo "Before:"; echo; cat known_hosts) >&2
        (echo "After:"; echo; cat known_hosts.NEW) >&2
        mv known_hosts.NEW known_hosts
      fi
  register: _ssh_tunnel_known_hosts
  changed_when: >-
    "NOCHANGE" not in _ssh_tunnel_known_hosts.stdout
