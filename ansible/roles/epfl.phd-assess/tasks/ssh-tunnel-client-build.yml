- tags: always
  include_vars: ssh-tunnel-client-vars.yml

- name: "Mirror {{ ssh_tunnel_client_base_image.qualified }} to {{ ssh_tunnel_client_base_image.mirrored }}"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ ssh_tunnel_client_base_image.shortname }}"
      namespace: "{{ openshift_namespace }}"
    from: "{{ ssh_tunnel_client_base_image.qualified }}"
    tag: "{{ ssh_tunnel_client_base_image.tag | string }}"

- name: "Build {{ ssh_tunnel_client_image_name }}"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ ssh_tunnel_client_image_name }}"
      namespace: "{{ openshift_namespace }}"
    source:
      dockerfile: |
        FROM {{ ssh_tunnel_client_base_image.mirrored }}
        RUN apk --no-cache add openssh-client autossh bash runit
        RUN mkdir -p /etc/service && chmod 1777 /etc/service
        RUN set -e -x; mkdir -p /usr/local/lib; \
            ({{ _tunnel_script_shell_include | to_shell_echo }}) > /usr/local/lib/ssh-tunnels-lib.sh

        # https://access.redhat.com/solutions/4665281 . SAD!
        RUN chmod g=u /etc/passwd
        RUN set -e -x; ({{ _entrypoint_script | to_shell_echo }}) > /entrypoint.sh; \
          chmod 755 /entrypoint.sh

        ENTRYPOINT /entrypoint.sh
    spec:
      resources:
        limits:
          cpu: '1'
          memory: 100M
  register: _ssh_tunnel_client_image
  vars:
    _entrypoint_script: |
      #!/bin/bash
      set -e -x

      if ! whoami &> /dev/null; then
        echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
      fi

      tunnel_count=1
      for script in "$@"; do
        runit_dir="/etc/service/ssh-tunnel-$((tunnel_count++))"
        mkdir -p "$runit_dir"
        (
          echo "#!/bin/bash"
          echo "source /usr/local/lib/ssh-tunnels-lib.sh"
          echo
          echo "$script"
        ) > "$runit_dir"/run
        chmod 755 "$runit_dir"/run
      done

      exec runsvdir /etc/service
    _tunnel_script_shell_include: |
      #!/bin/bash
      set -e -x

      ssh_tunnel () {
        local v=
        if [ -n "$SSH_TUNNEL_DEBUG" ]; then
          v="-vvv"
          export AUTOSSH_DEBUG=t
        fi

        exec autossh $v -N \
        -o "ServerAliveInterval 10" -o "ServerAliveCountMax 2" \
        "$@"
      }

- name: "Rebuild {{ ssh_tunnel_client_image_name }} now"
  when:
    - openshift_namespace == phd_assess_build_namespace
    - >-
      (_ssh_tunnel_client_image is not skipped
      and _ssh_tunnel_client_image is changed)
      or
      ("ssh-rebuild" in ansible_run_tags)
  shell:
    cmd: |
      oc -n "{{ openshift_namespace }}" start-build --wait "{{ ssh_tunnel_client_image_name }}"

  tags: ssh-rebuild

- name: "Promote {{ ssh_tunnel_client_image_name }} from {{ phd_assess_build_namespace }}"
  when: >-
    (openshift_namespace != phd_assess_build_namespace)
    and
    ("ssh-promote" in ansible_run_tags)
  tags: ssh-promote
  include_tasks:
    file: _promote_image.yml
    apply:
      tags:
        - ssh
        - ssh-promote
  vars:
    promote_image_name: "{{ ssh_tunnel_client_image_name }}"
    promote_image_tag: "latest"
    promote_from_namespace: "{{ phd_assess_build_namespace }}"
