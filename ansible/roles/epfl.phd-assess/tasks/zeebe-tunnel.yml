- tags: always
  include_vars: "{{ item }}"
  with_items:
    - common-k8s-vars.yml
    - zeebe-tunnel-vars.yml

- name: "Mirror {{ zeebe_tunnel_base_image.qualified }} to {{ zeebe_tunnel_base_image.mirrored }}"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ zeebe_tunnel_base_image.shortname }}"
      namespace: "{{ openshift_namespace }}"
    from: "{{ zeebe_tunnel_base_image.qualified }}"
    tag: "{{ zeebe_tunnel_base_image.tag | string }}"

- name: "Build {{ zeebe_tunnel_image_name }}"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ zeebe_tunnel_image_name }}"
      namespace: "{{ openshift_namespace }}"
    source:
      dockerfile: |
        FROM {{ zeebe_tunnel_base_image.mirrored }}
        RUN apk --no-cache add openssh-client bash runit
        RUN set -e -x; mkdir -p /etc/service/ssh-tunnel-quorum-1 /etc/service/ssh-tunnel-quorum-2; \
            ({{ _run_tunnel_1_script | to_shell_echo }}) > /etc/service/ssh-tunnel-quorum-1/run;   \
            ({{ _run_tunnel_2_script | to_shell_echo }}) > /etc/service/ssh-tunnel-quorum-2/run;   \
            chmod 755 /etc/service/ssh-tunnel-quorum-*/run;                                        \
            chmod 775 /etc/service /etc/service/*

        # https://access.redhat.com/solutions/4665281 . SAD!
        RUN chmod g=u /etc/passwd
        RUN set -e -x; ({{ _entrypoint_script | to_shell_echo }}) > /entrypoint.sh; \
          chmod 755 /entrypoint.sh

        ENTRYPOINT /entrypoint.sh
    spec:
      resources:
        limits:
          cpu: '1'
          memory: 100M
  register: _openshift_image_zeebe_broker
  vars:
    _entrypoint_script: |
      #!/bin/bash -x
      if ! whoami &> /dev/null; then
        echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
      fi
      exec runsvdir /etc/service
    _run_tunnel_1_script: |
      {{ _tunnel_script_header }}

      do_ssh_tunnel \
        -p {{ esb_ssh_tunnels.reverse_ports[0].via }} \
        -R "0.0.0.0:{{ zeebe_ports.quorum  }}:zeebe-quorum-1:{{ zeebe_ports.quorum  }}" \
        -R "0.0.0.0:{{ zeebe_ports.command }}:zeebe-quorum-1:{{ zeebe_ports.command }}" \
        -L "0.0.0.0:{{ zeebe_ports.quorum  }}:zeebe:{{ zeebe_ports.quorum  }}"
        -L "0.0.0.0:{{ zeebe_ports.command }}:zeebe:{{ zeebe_ports.command }}"
    _run_tunnel_2_script: |
      {{ _tunnel_script_header }}

      do_ssh_tunnel \
        -p {{ esb_ssh_tunnels.reverse_ports[1].via }} \
        -R "0.0.0.0:{{ zeebe_ports.quorum  }}:zeebe-quorum-2:{{ zeebe_ports.quorum  }}"
        -R "0.0.0.0:{{ zeebe_ports.command }}:zeebe-quorum-2:{{ zeebe_ports.command }}"
    _tunnel_script_header: |
      #!/bin/bash
      set -e -x

      do_ssh_tunnel () {
        local v=
        if [ -n "$SSH_TUNNEL_DEBUG" ]; then
          v="-vvv"
        fi

        exec ssh $v "$@" \
        {{ esb_ssh_tunnels.username }}@{{ esb_ssh_tunnels.host }} \
        sleep infinity
      }

- name: "Fetch keying material for ssh tunnel"
  no_log: true
  delegate_to: "{{ esb_ssh_tunnels.host | hostname_short }}"
  changed_when: false
  shell:
    cmd: |
      set -e -x
      cd "{{ esb_ssh_tunnels.client_keys_dir }}"
      for file in id_rsa id_rsa.pub known_hosts; do
        # Poor man's YAML!
        echo "$file: |"
        sed -e 's/^/  /' < $file
      done
  register: _ssh_tunnel_client_keys

- name: "{{ zeebe_tunnel_secret_name }} Secret"
  when: _ssh_tunnel_client_keys is not skipped
  openshift:
    state: latest
    apiVersion: v1
    kind: Secret
    metadata:
      name: "{{ zeebe_tunnel_secret_name }}"
      namespace: "{{ openshift_namespace }}"
    type: Opaque
    data: "{{ _ssh_tunnel_client_keys.stdout | from_yaml | base64_values }}"

- name: "k8s DeploymentConfig for the tunnel pod"
  when: >-
    openshift_namespace == "phd-assess-test"
  ## TODO(CHG0041195): change this to
  # when: >-
  #   openshift_namespace == "phd-assess"
  openshift:
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: "{{ zeebe_tunnel_dc_name }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      strategy: "{{ k8s_frugal_strategy }}"
      template:
        metadata:
          labels:
            name: "{{ zeebe_tunnel_dc_name }}"
        spec:
          containers:
            - name: ssh
              image: '{{ openshift_local_images_base }}/{{ zeebe_tunnel_image_name }}:latest'
              env: >-
                {{ [dict(name="SSH_TUNNEL_DEBUG", value="1")]
                if ssh_tunnel_debug
                else [] }}
              resources:
                limits:
                  cpu: '1'
                  memory: "50M"
              ports:
                - name: zeebe-quorum-0
                  containerPort: "{{ 26502 }}"
              volumeMounts:
                - name: sshkeys
                  mountPath: /.ssh  # The HOME of OpenShift-managed users is /
          volumes:
            - name: sshkeys
              secret:
                secretName: "{{ zeebe_tunnel_secret_name }}"
                defaultMode: 0400
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - ssh
          from:
            kind: ImageStreamTag
            name: '{{ zeebe_tunnel_image_name }}:latest'
            namespace: "{{ openshift_namespace }}"

- name: "zeebe-quorum-0 service"
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: zeebe-quorum-0
      namespace: "{{openshift_namespace}}"
    spec:
      type: ClusterIP
      ports:
        - name: "zeebe-raft"
          port: "{{ zeebe_ports.quorum }}"
          protocol: TCP
          targetPort: "{{ zeebe_ports.quorum }}"
        - name: "zeebe-command"
          port: "{{ zeebe_ports.command }}"
          protocol: TCP
          targetPort: "{{ zeebe_ports.command }}"
      selector:
        deploymentconfig: "{{ zeebe_tunnel_dc_name }}"
