- tags: always
  include_vars: "{{ item }}"
  with_items:
    - monitoring-vars.yml
    - common-k8s-vars.yml


- name: Prometheus service
  when: monitoring_enabled_in_namespace |bool
  tags: monitoring.prometheus
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
      labels:
        app: prometheus
    spec:
      ports:
        - name: prometheus
          port: 9090
      selector:
        app: prometheus


- name: Prometheus ConfigMap (configuration and sync scripts)
  when: monitoring_enabled_in_namespace |bool
  openshift:
    state: latest
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
    data:
      prometheus.yml: >
        {{ lookup("template", "prometheus-config.yml") }}
  register: _prometheus_configmap


- name: Prometheus StatefulSet
  when: monitoring_enabled_in_namespace |bool
  tags: monitoring.prometheus
  vars:
  openshift:
    state: latest
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
    spec:
      serviceName: prometheus  # Refs the service above, so that the
                               # pods get
                               # a predictable KubeDNS name
      selector:
        matchLabels:
          app: prometheus
      template:
        metadata:
          labels:
            app: prometheus
        spec:
          terminationGracePeriodSeconds: 10
          containers:
            - name: prometheus
              image: quay.io/prometheus/prometheus
              volumeMounts:
                - name: storage
                  mountPath: /prometheus
                - name: dynamic-config
                  mountPath: /prometheus-config/dynamic
                - name: static-config
                  mountPath: /prometheus-config/static
              command:
                - /bin/prometheus
                - --config.file=/prometheus-config/static/prometheus.yml
                - --storage.tsdb.path=/prometheus
              resources:
                limits:
                  cpu: '100m'
                  memory: 100M
          volumes:
            - name: storage
              emptyDir: {}
            - name: dynamic-config
              emptyDir: {}
            - name: static-config
              configMap:
                name: prometheus
  register: _prometheus_statefulset

- name: Restart Prometheus
  when: >-
    monitoring_enabled_in_namespace
    and (
    ( (_prometheus_statefulset | default({})) is changed )
    or
    ( (_prometheus_configmap | default({})) is changed )
    or
    ( "monitoring-restart" in ansible_run_tags )
    )
  shell:
    cmd: |
      oc delete pod prometheus-0
  tags: monitoring-restart


- name: "Pull upstream {{ monitoring_node_base_image.qualified }} image into {{ monitoring_node_base_image.mirrored }}"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ monitoring_node_base_image.shortname }}"
      namespace: "{{ openshift_namespace }}"
    from: "{{ monitoring_node_base_image.qualified }}"
    tag: "{{ monitoring_node_base_image.tag }}"

- name: "Build the disk-usage-exporter image"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: disk-usage-exporter
      namespace: "{{ openshift_namespace }}"
    from: "{{ monitoring_node_base_image.mirrored }}"
    git:
      repository: "https://github.com/epfl-si/PhDAssess"
      path: docker/monitoring
    spec:
      resources:
        limits:
          cpu: '100m'
          memory: 100M

- name: "Promote disk-usage-exporter image from {{ phd_assess_build_namespace }} to production"
  when:
    - >-
      openshift_namespace != phd_assess_build_namespace
    - >-
      "monitoring-promote" in ansible_run_tags
  tags: monitoring-promote
  include_tasks:
    file: _promote_image.yml
    apply:
      tags:
        - monitoring
        - monitoring-promote
  vars:
    promote_image_name: disk-usage-exporter
    promote_image_tag: "latest"
    promote_from_namespace: "{{ phd_assess_build_namespace }}"

- name: "disk-usage-exporter DeploymentConfig"
  when: monitoring_enabled_in_namespace |bool
  openshift:
    state: latest
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: disk-usage-exporter
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      strategy:
        resources: "{{ k8s_frugal_resources }}"
      selector:
        deployment-config.name: disk-usage-exporter
      template:
        metadata:
          labels:
            deployment-config.name: disk-usage-exporter
        spec:
          containers:
            - name: disk-usage-exporter
              image: "{{ monitoring_node_disk_usage_exporter_image }}"
              volumeMounts:
                - name: zeebe-data
                  mountPath: /usr/local/zeebe/data
              env:
                - name: DISK_USAGE_TARGETS
                  value: /usr/local/zeebe/data;/usr/local/zeebe/data/raft-partition/partitions/1/snapshots
              resources:
                limits:
                  cpu: '100m'
                  memory: 100M
              ports:
                - name: metrics
                  containerPort: 3000
          volumes:
            - name: zeebe-data
              persistentVolumeClaim:
                claimName: "{{ volume_zeebe_name }}"
      triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - disk-usage-exporter
          from:
            kind: ImageStreamTag
            name: 'disk-usage-exporter:latest'
            namespace: "{{openshift_namespace}}"


- name: "Pull upstream {{ phd_assess_ubuntu_base_image.qualified }} image into {{ phd_assess_ubuntu_base_image.mirrored }}"
  openshift_imagestream:
    metadata:
      name: "{{ phd_assess_ubuntu_base_image.shortname }}"
      namespace: "{{ openshift_namespace }}"
    from: "{{ phd_assess_ubuntu_base_image.qualified }}"
    tag: "{{ phd_assess_ubuntu_base_image.tag }}"
  tags: zeebe

- name: "Build Perl tools image"
  openshift_imagestream:
    metadata:
      name: zeebe-tools
      namespace: "{{ openshift_namespace }}"
    from: "{{ phd_assess_ubuntu_base_image.mirrored }}"
    git:
      repository: "https://github.com/epfl-si/PhDAssess"
      path: docker/zeebe-tools
    spec:
      resources: "{{ k8s_perl_build_resources }}"

- name: "Build Perl observability image"
  openshift_imagestream:
    metadata:
      name: zeebe-observability
      namespace: "{{ openshift_namespace }}"
    from: "{{ openshift_image_registry_inside }}/{{ openshift_namespace }}/zeebe-tools:latest"
    git:
      repository: "https://github.com/epfl-si/PhDAssess"
      path: docker/zeebe-observability
    spec:
      resources: "{{ k8s_perl_build_resources }}"
    triggers:
    - type: ImageChange
      imageChange:
        from:
          kind: ImageStreamTag
          name: zeebe-tools:latest
          namespace: "{{ openshift_namespace }}"

- name: "zeebe-observability DeploymentConfig"
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: zeebe-observability
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      strategy:
        resources: "{{ k8s_frugal_resources }}"
      selector:
        app: zeebe-observability
      template:
        metadata:
          labels:
            app: zeebe-observability
        spec:
          containers:
            - name: zeebe-observability
              image: "{{ openshift_local_images_base }}/zeebe-observability"
              volumeMounts:
                - name: zeebe-data
                  mountPath: /usr/local/zeebe/data
                  readOnly: true
              resources:
                limits:
                  cpu: '100m'
                  memory: 100M
              ports:
                - name: http
                  containerPort: 5000   # Default Plackup port
          volumes:
            - name: zeebe-data
              persistentVolumeClaim:
                claimName: "{{ volume_zeebe_name }}"
                readOnly: true
      triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - zeebe-observability
          from:
            kind: ImageStreamTag
            name: 'zeebe-observability:latest'
            namespace: "{{openshift_namespace}}"


- name: zeebe-observability Service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: zeebe-observability
      namespace: "{{ openshift_namespace }}"
      labels:
        app: zeebe-observability
    spec:
      ports:
        - name: http
          port: 5000
      selector:
        app: zeebe-observability
